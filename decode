#!/usr/bin/env python
import optparse
import sys
import models
from collections import namedtuple

optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="data/input", help="File containing sentences to translate (default=data/input)")
optparser.add_option("-t", "--translation-model", dest="tm", default="data/tm", help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="data/lm", help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxsize, type="int", help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=5, type="int", help="Limit on number of translations to consider per phrase (default=1)")
optparser.add_option("-s", "--stack-size", dest="s", default=1000, type="int", help="Maximum stack size (default=1)")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,  help="Verbose mode (default=off)")
opts = optparser.parse_args()[0]

tm = models.TM(opts.tm, opts.k)
lm = models.LM(opts.lm)
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]

# tm should translate unknown words as-is with probability 1
for word in set(sum(french,())):
  if (word,) not in tm:
    tm[(word,)] = [models.phrase(word, 0.0)]

sys.stderr.write("Decoding %s...\n" % (opts.input,))
for f in french:
  # Implement phrase reordering by allowing non-monotonic translation
  hypothesis = namedtuple("hypothesis", "logprob, lm_state, predecessor, phrase, coverage")
  initial_hypothesis = hypothesis(0.0, lm.begin(), None, None, frozenset())
  stacks = [{} for _ in range(len(f)+1)]
  stacks[0][(lm.begin(), frozenset())] = initial_hypothesis
  max_phrase_length = 5
  for stack_idx in range(len(f)):
    current_stack = stacks[stack_idx]
    for h in sorted(current_stack.values(), key=lambda h: -h.logprob)[:opts.s]:
      for start in range(len(f)):
        if start in h.coverage:
          continue
        for end in range(start+1, min(len(f)+1, start+max_phrase_length+1)):
          if any(pos in h.coverage for pos in range(start, end)):
            continue
          if f[start:end] in tm:
            for phrase in tm[f[start:end]]:
              new_coverage = h.coverage.union(range(start, end))
              logprob = h.logprob + phrase.logprob
              lm_state = h.lm_state
              for word in phrase.english.split():
                (lm_state, word_logprob) = lm.score(lm_state, word)
                logprob += word_logprob
              if len(new_coverage) == len(f):
                logprob += lm.end(lm_state)
              new_hypothesis = hypothesis(logprob, lm_state, h, phrase, new_coverage)
              new_stack_idx = len(new_coverage)
              key = (lm_state, new_coverage)
              if key not in stacks[new_stack_idx] or stacks[new_stack_idx][key].logprob < logprob:
                stacks[new_stack_idx][key] = new_hypothesis
  if stacks[-1]:
    winner = max(stacks[-1].values(), key=lambda h: h.logprob)
    def extract_english(h): 
      return "" if h.predecessor is None else "%s%s " % (extract_english(h.predecessor), h.phrase.english)
    print(extract_english(winner))
    if opts.verbose:
      def extract_tm_logprob(h):
        return 0.0 if h.predecessor is None else h.phrase.logprob + extract_tm_logprob(h.predecessor)
      tm_logprob = extract_tm_logprob(winner)
      sys.stderr.write("LM = %f, TM = %f, Total = %f\n" % 
        (winner.logprob - tm_logprob, tm_logprob, winner.logprob))
  else:
    sys.stderr.write("No translation found for sentence: %s\n" % " ".join(f))
    print("")
